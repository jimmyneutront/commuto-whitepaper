The Commuto Protocol
Version 0.2

The Commuto Protocol allows users to exchange fiat currencies and stablecoins without the use of a trusted intermediary.

The Commuto protocol is intended to be used with either a graphical, text-based/command line or API interface, to allow
easy interaction with the core protocol functionality. These interfaces will make up a peer-to-peer network across
which offers will be broadcast, so each user will have a complete local copy of the Commuto Protocol's decentralized
offer book. However, this document focuses only on describing the functionality of the protocol, not of the various
interfaces, which are described in the Commuto Interface Specification.

The Commuto Protocol's name comes from the Latin word "commuto", meaning "I exchange" or "I barter."

Contract code can be viewed here: https://github.com/jimmyneutront/commuto-protocol

Motivation:
At the time of writing in August 2021, many countries are experiencing severe inflation. Honest, hardworking people,
who love their country and express their belief in the strength of its economy by holding their national currency, are
watching the purchasing power of their life savings melt away as their country's central bank rapidly inflates the
supply of national currency. In order to afford food, medicine, clothing, education and other basic necessities of life
for themselves and for their families, these people have no choice but to swap their national currency for a stable
foreign currency, such as the Euro, Swiss Franc or United States Dollar.

In many parts of the world, this type of swap can be very difficult to complete. Many countries impose unfairly small
limits on the amount of national currency that an individual can exchange for foreign currency. Strict sanctions,
created by well-meaning world leaders and intended to target cruel rulers of oppressive regimes, often catch innocent
civilians in the crossfire, cutting off their access to financial services and further confounding their efforts to
attain financial stability. Exorbitantly high fees charged by many exchange platforms take yet another chunk out of
users' savings, disproportionately affecting low income earners. And long transaction and exchange times harm those who
may need to quickly turn a portion of their foreign-currency-denominated savings back into their national currency, to
cover unexpected expenses like medical bills.

In response to these failures of fiat currencies and the traditional banking system, stablecoins, the prices of which
are pegged to stable and widely used currencies like the Euro or US Dollar, have been created, and are on the path to
widespread adoption.

What is needed is a fast, affordable and secure tool to facilitate the exchange between fiat currencies and stablecoins.
Such a tool didn't exist, until now.

Core Principles:
The right to freely exchange one's own fairly acquired property is fundamental. In accordance with this basic principle,
the Commuto Protocol helps users swap fiat currencies and stablecoins in a fast, affordable, secure, private and
censorship-resistant manner.

The Commuto Protocol is fast because it is a decentralized application built with smart contracts. Whereas traditional
bank transfers may take hours or days, a transaction of smart-contract-powered tokens on Ethereum or Binance Smart Chain
takes mere seconds.

The Commuto Protocol is affordable because stablecoins have low transaction fees. Even high value transactions incur
fees that only amount to a few dollars at most, and in some cases, only a few cents.

The Commuto Protocol is secure because it has no trusted intermediary. All funds are handled in a decentralized and
transparent fashion by an auditable, open-source smart contract, and no 3rd party can unilaterally seize funds or
otherwise interfere with the exchange protocol.

The Commuto Protocol is private because users remain in control of their personal information. Their data is never made
public or stored in a central location. This means that there is no database for malicious actors to target in an
attempt to identify users or steal their information.

The Commuto Protocol is censorship-resistant because it is private and has no single point of failure. Because it is
built on technology like Ethereum and Binance Smart Chain, an entity attempting to censor it must censor the execution
of smart contracts on these platforms, which has been proven to be incredibly difficult to do as they have been built
from the ground up with censorship-resistance as a core tenet.

The Protocol:
The Commuto Protocol can be best described as a sequence of simple steps. The Commuto Protocol will support multiple
stablecoins (such as DAI, USDC, BUSD, USDT) and many national currencies, so this document will refer to a nonspecific
stablecoin with the symbol STBL, and a generic national currency with the symbol FIAT. Sellers have STBL and want FIAT,
and buyers have FIAT and want STBL.
A Commuto Interface Id is an array of bytes that refers to a specific Commuto Interface instance, and contains a
SHA-256 hash of a public key belonging to a Commuto Interface instance.
1) The maker will create an offer by calling the openOffer function, specifying:
bytes16 offerID: a Universally Unique Identifier (UUID) to uniquely identify the offer
Offer newOffer:
    bool isCreated: used by contract code to check for offer existence, will be set to true by openOffer
    bool isTaken: used by contract code to check for offer taken status, will be set to false by openOffer
    address maker: the maker's address, will be set to msg.sender by openOffer
    bytes interfaceId: the maker's Commuto Interface Id
    address stablecoin: the contract address of the stablecoin to be swapped
    uint256 amountLowerBound: the lower bound of the range of amount of STBL to be swapped
    uint256 amountUpperBound: the upper bound of the range of amount of STBL to be swapped
    uint256 securityDepositAmount: the amount of STBL to be used as a security deposit which must be not less than 10%
        of amountUpperBound
    uint256 serviceFeeRate: the rate, expressed as a percentage times 100, of the taken swap amount that will be charged
        to both the maker and the taker as a service fee
    SwapDirection direction: whether the offer is in the BUY or SELL direction
    bytes price: the price of the offer, in the format (amount of FIAT) per (1 STBL)
    bytes[] settlementMethods: the names of the settlement methods to be used for settlement in UTF-8 byte format
    uint256 protocolVersion: a version number describing the version of the Commuto Protocol for which the offer is
        is being created
This will add the offer to a map of all offers and the settlement method information to a map of supported settlement
methods for each offer. This will also lock the maker's security deposit amount plus a 1% of amountUpperBound fee of
STBL in escrow. This will then emit an OfferOpened event, specifying the new offer id and the maker's interface Id. Then
the maker will broadcast the offer across the peer-to-peer network.

2) The taker will take the swap offer by calling the takeOffer function, specifying:
bytes16 offerID: the id of the offer to be taken
Swap newSwap:
    bool isCreated: used by contract code to check for swap existence, will be set to true by takeOffer
    bool requiresFill: used by contract code to determine if maker has deposited STBL, in the case of a maker-as-seller
        offer
    address maker: the maker's address
    bytes makerInterfaceId: the maker's Commuto Interface Id
    address taker: the taker's address
    bytes takerInterfaceId: the taker's Commuto Interface Id
    address stablecoin: the contract address of the stablecoin to be swapped
    uint256 amountLowerBound: the lower bound of the range of amount of STBL to be swapped
    uint256 amountUpperBound: the upper bound of the range of amount of STBL to be swapped
    uint256 securityDepositAmount: the amount of STBL to be used as a security deposit
    uint256 takenSwapAmount: the amount of STBL to be swapped; must be >= amountLowerBound and <= amountUpperBound
    uint256 serviceFeeAmount: used by contract code, equal to 1% of takenSwapAmount
    uint256 serviceFeeRate: the rate, expressed as a percentage times 100, of the taken swap amount that will be charged
        to both the maker and the taker as a service fee
    SwapDirection direction: whether the offer is in the BUY or SELL direction
    bytes price: the price of the offer, in the format (amount of FIAT) per (1 STBL)
    bytes settlementMethod: the name of the settlement method to be used for settlement in UTF-8 byte format
    uint256 protocolVersion: a version number describing the version of the Commuto Protocol on which the swap will be
        executed
    bool isPaymentSent: used by contract code to track payment status, will be set to false by takeOffer
    bool isPaymentReceived: used by contract code to track payment status, will be set to false by takeOffer
    bool hasBuyerClosed: used by contract code to track swap state, will be set to false by takeOffer
    bool hasSellerClosed: used by contract code to track swap state, will be set to false by takeOffer
    DisputeRaiser disputeRaiser: used by contract code to track dispute status, will be set to NONE by takeOffer
This will validate all data to ensure it matches that of the offer being taken. If not, it will revert with a proper
error message. This will also lock the taker's security deposit amount plus a 1% fee of STBL in escrow. If the taker is
the seller, this will also lock the amount of STBL to be swapped in escrow. This will then mark the corresponding offer
as taken and will add the swap to a map of all swaps. This will then emit an OfferTaken event, specifying the new swap
id and the taker's interface Id.

3) If the maker of the offer is the seller, the maker fills the swap by calling the fillSwap function, specifying:
bytes16 swapID: the id of the swap to fill
This will ensure that the caller is the maker and seller and that the swap has not already been filled, and will then
lock up the amount of STBL to be swapped in escrow. This will then emit an SwapFilled event, specifying the swap id.

4) The buyer sends FIAT payment to the seller, using the payment method and user information specified in the swap, and
then reports that FIAT payment has been sent by calling the reportPaymentSent function, specifying:
bytes16 swapID: the id of the swap for which FIAT payment has been sent
This will ensure that the caller is the buyer and that payment has not already been sent. If the swap is a
maker-as-seller swap, this will make sure the swap has been filled. Then it will mark the
swap as having payment sent and will emit a PaymentSent event, specifying the swap id.

5) The seller receives the FIAT payment via the payment method specified in the offer, and then calls the
reportPaymentReceived function, specifying:
bytes16 swapID: the id of the swap for which FIAT payment has been received
This will ensure that the caller is the seller, that payment has been sent, and that payment has not already been
received. Then it will mark the swap as having payment received and will emit a PaymentReceived event, specifying the
swap id.

6) The buyer and seller then each close the swap position by calling the closeSwap function, specifying:
bytes16 swapID: the id of the swap to close
This will ensure that payment has been received and will send each of the two 1% service fees to the fee pool. If the
caller is the buyer and taker, this will ensure the buyer has not already closed the swap, and then will refund the
taker's security deposit and will send the swap amount to the taker. If the caller is the buyer and maker, this will
ensure the buyer has not already closed the swap, and then will refund the maker's security deposit, and will send the
swap amount and the remainder of the max service fee to the maker. If the caller is the seller and taker, this will
ensure the seller has not already closed the swap, and then will refund the taker's security deposit. If the caller is
the seller and maker, this will ensure the seller has not already closed the swap, and then will refund the maker's
security deposit and will send the remainder of the max service fee to the maker. If the caller is the buyer, this will
then emit a BuyerClosed event, specifying the swap id. If the caller is the seller, this will then emit a SellerClosed
event, specifying the swap id. Once buyer and seller have both requested swap closure, the swap is completely closed.

A maker can edit the price and supported settlement methods of their offer by calling the editOffer function,
specifying:
bytes16 offerID: the id of the swap offer to edit
Offer editedOffer:
    bool isCreated: used by contract code to check for offer existence, will be set to true by openOffer
    bool isTaken: used by contract code to check for offer taken status, will be set to false by openOffer
    address maker: the maker's address, set to msg.sender by openOffer
    bytes interfaceId: the maker's Commuto Interface Id
    address stablecoin: the contract address of the stablecoin to be swapped
    uint256 amountLowerBound: the lower bound of the range of amount of STBL to be swapped
    uint256 amountUpperBound: the upper bound of the range of amount of STBL to be swapped
    uint256 securityDepositAmount: the amount of STBL to be used as a security deposit which must be not less than 10%
        of amountUpperBound
    uint256 serviceFeeRate: the rate, expressed as a percentage times 100, of the taken swap amount that will be charged
        to both the maker and the taker as a service fee
    SwapDirection direction: whether the offer is in the BUY or SELL direction
    bytes price: the price of the offer, in the format (amount of FIAT) per (1 STBL)
    bytes[] settlementMethods: the names of the settlement methods to be used for settlement in UTF-8 byte format
    uint256 protocolVersion: a version number describing the version of the Commuto Protocol for which the offer is
        is being created
bool editPrice: whether to apply the price of editedOffer to the open offer with id offerID
bool editSettlementMethods: whether to apply the settlement methods of editedOffer to the open offer with id offerID
This will ensure the caller of the function is the maker of the swap offer with the specified id, that the offer exists,
and that the offer has not been taken. If editPrice is true, this will set the price of the open offer to that of
editedOffer. If editSettlementMethods is true, this will remove support for all the supported settlement methods of the
open offer, and then add support to the offer for all settlement methods specified in editedOffer. This will not
change any other properties of the offer.

A maker can cancel their offer by calling the cancelOffer function, specifying:
bytes16 offerID: the id of the swap offer to close
This will ensure the caller of this function is the maker of the swap offer with the specified id and that the offer has
not been taken. Then this will return to the maker their STBL, remove the offer with the corresponding id from the map
of all open offers, remove the records of that offer's accepted settlement methods, and will emit a OfferCanceled event
specifying the offer id, prompting other users to remove it from their offer books.

Governance and Revenue Distribution:
The Commuto Protocol uses OpenZepplin's system of modular Governor contracts for on-chain governance. The Commuto
Protocol's Token, the Commuto Token (with symbol "CMTO") is used to determine voting power and for revenue distribution.
At the end of every week, accumulated service fees are distributed to CMTO holders, according to the percentage of all
issued CMTO tokens that they hold.
The Commuto Protocol's on-chain governance consists of four contracts: the Primary Governor and its TimelockController,
and the Dispute Resolution Governor and its TimelockController. The latter pair are used by Commuto Protocol users
to propose resolutions for disputed swaps that have been escalated for resolution by CMTO holders, via a call by the
Dispute Resolution TimelockController to CommutoSwap's closeEscalatedSwap function. The Dispute Resolution Governor
has a quorum requirement of 1% (meaning that at least 1% of the total supply of CMTO tokens at the time of proposal
creation must be used to cast votes, not necessarily in favor of the proposal, in order for the proposal to pass) and
no proposal threshold, because the Dispute Resolution Governor is only used to resolve disputes, meaning all proposals
will be created by Commuto Protocol users who likely do not hold Commuto Tokens. The Primary Governor and its
TimelockController are used for all other governance-related activities, including but not limited to the following
types of issues/proposals:
The issuance of additional CMTO tokens
Additional miscellaneous expenses, to be paid via service fee revenue
Addition or removal of support for specific settlement methods
Addition or removal of support for specific stablecoins
Addition or removal of dispute agents
Compensation of dispute agents (dispute agents and their roles in the dispute process are described below)
Changes to the service fee rate
The Primary Governor has a quorum requirement of 40% and a proposal threshold of 1%. Both Governors have a one day delay
between the beginning of a proposal's voting period and the time at which the proposal is first created, and all
proposals have a one week voting period. If a proposal is not approved within one week of its creation, it is defeated.

Every time a non-disputed swap is closed or a swap is disputed, CommutoSwap transfers the swap's service fees to the
Primary TimelockController. The Primary TimelockController has a function to transfer service fees to the Commuto Token
Contract, where they will then be distributed to CMTO holders. By default, this function can be called by anyone at any
time. However, the function can be temporarily disabled by a governance proposal in order to accumulate service fees for
a miscellaneous expense.

If dispute agents are unable to resolve a disputed swap within 1 week using the process described below, a user may open
dispute resolution to CMTO token holders via the Dispute Resolution Governor.

Dispute Process:
In the process described above, both the buyer and seller have opportunities to misbehave and attempt to obtain payment
from the other party without sending payment themselves. Additionally, other issues may arise during the swap, such as
the buyer becoming unable to send FIAT payment, or the seller becoming unable to receive FIAT. In the event of such
issues, users can raise a dispute to request intervention from dispute agents.

Dispute agents are neutral, unbiased, bonded 3rd parties who hear arguments from both the buyer and seller concerning
what went wrong during the swap, and determine who should receive the STBL still held in escrow. The Commuto Protocol
maintains a list of the addresses of all active dispute agents.

A user can raise a dispute and request intervention from dispute agents through the following process:

1) A swapper raises a dispute by calling the raiseDispute function, specifying:
bytes16 swapID: the ID of the swap that is being disputed
address disputeAgent0: the address of an active dispute agent
address disputeAgent1: the address of an active dispute agent
address disputeAgent2: the address of an active dispute agent
This will ensure the swap exists, that the subitted addresses belong to active dispute agents, that the caller has chosen
three different dispute agents, that the swap is not closed, that the swap is not already disputed, and that the caller
is the maker or taker. Then, in a map of all disputes, raiseDispute will record who raised the dispute, the block at
which the dispute was raised, and the addresses of the selected dispute agents. Then raiseDispute will emit a
DisputeRaised event, specifying the addresses of all selected dispute agents.

#TODO: Describe this process in the Commuto Interface Specification
2) Through the Commuto Interface, each user enters a private chat room with the three dispute agents and explains the
circumstances of the dispute, which may involve problems sending or receiving FIAT payment, an unresponsive
peer, or other reason. The dispute agents also enter a private chat room amongst themselves to discuss a resolution.
This process is described in the Commuto Interface Specification. The dispute agents have one week to determine a
resolution to the dispute. They determine the amounts of STBL held in escrow that the buyer and seller should receive,
and then each dispute agent calls the proposeResolution function, specifying:
bytes16 swapID: the ID of the disputed swap for which a resolution is being proposed
uint256 makerPayout: the amount of STBL held in escrow that the caller believes the maker should receive
uint256 takerPayout: the amount of STBL held in escrow that the caller believes the taker should receive
uint256 confiscationPayout: the amount of STBL held in escrow that the caller believes should be confiscated and sent to
    the service fee pool
This will ensure the swap is disputed, ensure the dispute is not escalated, ensure the sum of the recommended payout
amounts is equal to the amount of STBL that the buyer and seller have locked in escrow, minus actual service fees,
ensure that neither the maker or taker have already reacted to resolution proposals, and ensure that the caller is one
of the three selected dispute agents. Then proposeResolution will record the caller's proposed payout amounts and record
that the caller has submitted a resolution proposal. Then proposeResolution will emit a ResolutionProposed event,
specifying the ID of the disputed swap for which a resolution has been proposed and the address of the dispute agent
who proposed the resolution.

3) If at least two dispute agents have submitted identical resolution proposals, then the maker and taker should each
indicate whether they accept or reject the proposed resolution by calling reactToResolutionProposal, specifying:
bytes16 swapID: the ID of the disputed swap for which at least two resolutions have been proposed, to which the caller
    is reacting
DisputeReaction reaction: the caller's reaction to the proposed resolution
This will ensure that reaction is not NO_REACTION, that the dispute is not been escalated, that the caller has not
already submitted a reaction, that the caller is the maker or taker of the disputed swap, and that at least two dispute
agents have submitted identical resolution proposals. Then reactToResolutionProposal records the caller's reaction
to the proposed resolution and emits a ReactionSubmitted event, specifying the ID of the disputed swap for which a
resolution proposal reaction has been submitted, the address of the caller, and the reaction. If either the maker or
taker rejects the proposed resolution, then their call to reactToResolutionProposal automatically calls escalateDispute,
specifying:
bytes16 swapID: the ID of the disputed swap that is being escalated
EscalationReason reason: the reason for escalating the dispute, which in this case is REJECTION
The functionality of escalateDispute is described below.

4) If the maker and taker both accept the resolution proposal, then the maker and taker each close the swap position by
calling the closeDisputedSwap function, specifying:
bytes16 swapID: the id of the disputed swap to close
This will ensure that the maker and taker have both accepted the proposed resolution, that the caller is the maker or
taker of the swap, and that the caller has not already closed the disputed swap. Then closeDisputedSwap transfers the
amount of STBL owed to the caller according to the accepted resolution proposals, and will transfer the caller's portion
of the service fee to the service fee pool. If the caller's swap counterparty has already closed the swap, then
closeDisputedSwap transfers the confiscation payout amount, if any, to the service fee pool as well, and then updates
the dispute state to PAID_OUT. Finally, closeDisputedSwap emits a DisputeClosed event, specifying the ID of the disputed
swap that has been closed, and the address of the caller.

If the dispute agents are not able to agree on a resolution within 1 week, or if the maker and/or taker neither accepts
nor rejects the proposed resolution, a user can open up dispute resolution to CMTO token holders. If one of the swappers
rejects the proposed solution, dispute resolution is opened to CMTO token holders automatically. In any case, this is
done by calling escalateDispute, specifying:
bytes16 swapID: the ID of the disputed swap that is being escalated
EscalationReason reason: the reason for escalating the dispute. If escalateDispute is being called automatically because
    a swapper is rejecting a proposed resolution, then the reason is REJECTION. If escalateDispute is being called
    because the dispute agents haven't agreed on a resolution within 1 week, then the reason is
    NO_DISPUTE_AGENT_AGREEMENT. If escalateDispute is being called because a swapper has failed to react to a proposed
    resolution within 1 week, then the reason is NO_COUNTERPARTY_REACTION.
This will ensure that the caller is the maker or taker of the disputed swap, and that the dispute is not already
escalated. If reason is NO_DISPUTE_AGENT_AGREEMENT, then escalateDispute will ensure that dispute agents have not
agreed upon a resolution proposal, and that more than one week has passed since the dispute was raised. If reason is
NO_COUNTERPARTY_REACTION, then escalateDispute will ensure that the caller's counterparty has not reacted and that more
than one week has passed since the dispute was raised. Then escalateDispute will record the total amount of STBL locked
in escrow by the maker and taker minus service fees in the map of disputes, update the dispute state to ESCALATED, and
transfer the service fees to the service fee pool. Additionally, escalateDispute will emit a DisputeEscalated event,
specifying the ID of the escalated disputed swap, the address of the caller, and the reason for escalation.

Then the escalated dispute is resolved with the following process:

1) The maker and/or taker create a new governance proposal for disputed swap resolution, specifying the swap ID and the
amount of STBL to be paid out to the maker and taker, and the amount (if any) of STBL to be confiscated and sent to the
service fee pool.

2) CMTO token holders vote on the governance proposals submitted by the swappers. If proposals do not pass, the swappers
may re-submit alternative proposals until a proposal passes.

3) If a resolution proposal does pass, then anyone can execute the proposal via the governance timelock. When such a
proposal is executed, the timelock calls the CommutoSwap's closeEscalatedDispute, passing the swap's id, the amount
of STBL to be paid out to the maker, the amount of STBL to be paid out to the taker, and the amount of STBL (if any) to
be confiscated and sent to the service fee pool. closeEscalatedDispute will ensure that the dispute is escalated and not
already closed, that the sum of the payout amounts equals the total amount of STBL held in escrow as recorded earlier,
and that the caller is the timelock. Then it pays the maker, taker and service fee pool according to the passed values,
marks the escalated swap as closed, and emits an EscalatedSwapClosed event, specifying the id of the swap. Now the swap
is completely closed.